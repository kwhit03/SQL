Hackerrank queries

1.Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.
SELECT name 
FROM city 
WHERE population > 120000 AND CountryCode = 'USA';

2.Query all columns for a city in CITY with the ID 1661.
SELECT * FROM city WHERE id = 1661;

3.Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.
SELECT * FROM city WHERE CountryCode = 'JPN';

4.Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.
SELECT name    
FROM city 
WHERE countrycode = 'JPN'

5.Query a list of CITY and STATE from the STATION table.
SELECT city, state FROM station; 

6.Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.
SELECT DISTINCT(city) 
FROM station 
WHERE id % 2 = 0; 

7.Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
SELECT COUNT(city)-count(DISTINCT(city))
FROM station;

8.Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). 
If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
SELECT city, max(length(city)) FROM station group by city order by max(length(city)) DESC limit 1;
SELECT city, min(length(city)) FROM station group by city order by min(length(city)) asc limit 1;

9.Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
SELECT DISTINCT(city) FROM station WHERE city LIKE '[aeiou]%';

10.Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
SELECT DISTINCT(city) FROM station WHERE city LIKE '%[aeiou]';

11.Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
SELECT DISTINCT(city) 
FROM station 
WHERE city LIKE '[aeiou]%[aeiou]';

12.Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
SELECT DISTINCT(city) 
FROM station 
WHERE city NOT LIKE '[aeiou]%';

13. Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT(city) 
FROM station 
WHERE city NOT LIKE '%[aeiou]';

14.Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT(city) 
FROM station 
WHERE city NOT LIKE '[aeiou]%[aeiou]';

15.Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT(city) 
FROM station 
WHERE city NOT LIKE '%[aeiou]' 
AND city NOT LIKE'[aeiou]%';

16. Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. 
If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
SELECT name 
FROM students 
WHERE marks > 75 ORDER BY RIGHT(NAME,3),ID;

17. Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
SELECT name FROM employee ORDER BY name; 

18.Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per 
month who have been employees for less than  months. Sort your result by ascending employee_id.
SELECT name 
FROM employee 
WHERE salary > 2000
AND months < 10
ORDER BY employee_id;

19.Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.
SELECT city.name 
FROM city
JOIN country
ON city.countrycode = country.code
WHERE continent = "Africa";

20.Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations 
(CITY.Population) rounded down to the nearest integer.
SELECT country.continent, FLOOR(AVG(city.population))
FROM city
JOIN country
ON city.countrycode = country.code
GROUP BY country.continent;

21.Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements
for each record in the table:
Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
SELECT CASE 
WHEN A + B > C AND B + C > A AND A + C > B THEN
    CASE 
      WHEN A = B AND B = C THEN 'Equilateral'
      WHEN A = B OR A = C OR B = C THEN 'Isosceles'
      ELSE 'Scalene'
    END
ELSE 'Not A Triangle'
end
FROM TRIANGLES; 
Not A Triangle: The given values of A, B, and C don't form a triangle.

22.Query the total population of all cities in CITY where District is California
SELECT SUM(population) FROM city WHERE district = 'California';

23.SELECT AVG(population) FROM city WHERE district = 'California';
SELECT AVG(population) FROM city WHERE district = 'California';

24.Query the average population for all cities in CITY, rounded down to the nearest integer.
SELECT FLOOR(AVG(population)) FROM city;

25.Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.
SELECT SUM(population) FROM city WHERE countrycode = 'JPN';

26.Query the difference between the maximum and minimum populations in CITY.
SELECT MAX(population)-MIN(population) FROM city;

27.Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's  
key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with 
any zeros removed), and the actual average salary. 
Write a query calculating the amount of error (i.e.:  average monthly salaries), and round it up to the next integer.
SELECT CEIL(AVG(salary)-AVG(REPLACE(salary, 0, ''))) FROM employees;

28.We define an employee's total earnings to be their monthly  worked, and the maximum total earnings to be the maximum total earnings for any employee 
in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total 
earnings. Then print these values as  space-separated integers
SELECT 
    (salary * months),
    COUNT(*) 
FROM employee 
GROUP BY 1 
ORDER BY (salary * months) DESC
LIMIT 1;

29.Query the following two values from the STATION table: 
The sum of all values in LAT_N rounded to a scale of  decimal places.
The sum of all values in LONG_W rounded to a scale of  decimal places.
SELECT
    ROUND(SUM(lat_n), 2),
    ROUND(SUM(long_w), 2)
FROM station;

30.Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than  and less than . Truncate your answer to  decimal places.
SELECT
    ROUND(SUM(lat_n), 4) 
FROM station 
WHERE lat_n > 38.7882 AND lat_n < 137.2345;  

31.Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than . Truncate your answer to  decimal places.
SELECT
    ROUND(MAX(lat_n), 4)
FROM station 
WHERE lat_n < 137.2345;  

32.Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than . Round your answer to  decimal places.
SELECT ROUND(long_w, 4)
FROM station
WHERE lat_n < 137.2345
ORDER BY lat_n DESC
limit 1;

33.Query the smallest Northern Latitude (LAT_N) from STATION that is greater than . Round your answer to  decimal places.
SELECT ROUND(MIN(lat_n), 4)
FROM station
WHERE lat_n>38.7780
ORDER BY lat_n ASC
limit 1;

34.Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than . Round your answer to  decimal places.
SELECT ROUND(long_w, 4)
FROM station
WHERE lat_n>38.7780
ORDER BY lat_n ASC
limit 1;

35.Consider  and  to be two points on a 2D plane.

 happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
 happens to equal the minimum value in Western Longitude (LONG_W in STATION).
 happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
 happens to equal the maximum value in Western Longitude (LONG_W in STATION).
Query the Manhattan Distance between points  and  and round it to a scale of  decimal places.

SELECT 
    ROUND(MAX(lat_n)-(MIN(lat_n))+(MAX(long_w)- MIN(long_w)), 4)
FROM station; 

36.Consider  and  to be two points on a 2D plane where  are the respective minimum and maximum values of Northern Latitude (LAT_N) and  are the 
respective minimum and maximum values of Western Longitude (LONG_W) in STATION.
Query the Euclidean Distance between points  and  and format your answer to display  decimal digits.
SELECT
    ROUND(
        SQRT(
        POWER(MAX(lat_n)-MIN(lat_n), 2) + 
        POWER(MAX(long_w)- MIN(long_w), 2)
        )
        , 4)
FROM STATION;






















